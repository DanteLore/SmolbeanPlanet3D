using System.Linq;
using System.Collections.Generic;
using UnityEngine;
using System;

public class BuildingController : MonoBehaviour, IObjectGenerator
{
    public BuildingSpec[] buildings;
    public int Priority { get { return 100; } }
    public static BuildingController Instance;
    private GridManager gridManager;


    public IEnumerable<SmolbeanBuilding> Buildings
    {
        get
        {
            return GetComponentsInChildren<SmolbeanBuilding>();
        }
    }

    void Awake()
    {
        if (Instance != null && Instance != this)
            Destroy(this);
        else
            Instance = this;
    }

    void Start()
    {
        gridManager = FindFirstObjectByType<GridManager>();
    }

    public void Generate(List<int> gameMap, int gameMapWidth, int gameMapHeight)
    {
        // Nothing to do here - buildings generated by the player!
    }

    public void Clear()
    {
        while (transform.childCount > 0)
            DestroyImmediate(transform.GetChild(0).gameObject);
    }

    public List<BuildingObjectSaveData> GetSaveData()
    {
        return GetComponentsInChildren<SmolbeanBuilding>()
            .Select(b => new BuildingObjectSaveData
            {
                positionX = b.transform.position.x,
                positionY = b.transform.position.y,
                positionZ = b.transform.position.z,
                rotationY = b.transform.rotation.eulerAngles.y,
                prefabIndex = b.PrefabIndex,
                inventory = b.Inventory.GetSaveData(),
                complete = !(b is BuildingSite)
            })
            .ToList();
    }

    public void LoadBuildings(List<BuildingObjectSaveData> loadedData)
    {
        Clear();

        foreach (var buildingData in loadedData)
            InstantiateBuilding(buildingData);
    }

    public SmolbeanBuilding PlaceBuilding(Vector3 pos, BuildingSpec spec)
    {
        return PlaceBuilding(pos, Array.IndexOf(buildings, spec));
    }

    public SmolbeanBuilding PlaceBuilding(Vector3 pos, int selectedBuildingIndex)
    {
        BuildingObjectSaveData saveData = new()
        {
            positionX = pos.x,
            positionY = pos.y,
            positionZ = pos.z,
            rotationY = 0,
            prefabIndex = selectedBuildingIndex,
            complete = buildings[selectedBuildingIndex].instantBuild
        };

        return InstantiateBuilding(saveData);
    }

    public SmolbeanBuilding PlaceBuildingOnSquare(BuildingSpec spec, int x, int y, IEnumerable<InventoryItemSaveData> startingInventory = null)
    {
        var bounds = gridManager.GetSquareBounds(x, y);

        float worldX = bounds.center.x;
        float worldZ = bounds.center.y;
        float worldY = gridManager.GetGridHeightAt(worldX, worldZ);

        BuildingObjectSaveData saveData = new()
        {
            positionX = worldX,
            positionY = worldY,
            positionZ = worldZ,
            rotationY = 0,
            prefabIndex = Array.IndexOf(buildings, spec),
            complete = true,
            inventory = startingInventory
        };

        return InstantiateBuilding(saveData);
    }

    public SmolbeanBuilding InstantiateBuilding(BuildingObjectSaveData saveData)
    {
        var pos = new Vector3(saveData.positionX, saveData.positionY, saveData.positionZ);
        Vector2Int worldPos = gridManager.GetGameSquareFromWorldCoords(pos);

        var spec = buildings[saveData.prefabIndex];
        var prefab = saveData.complete ? spec.prefab : spec.sitePrefab;

        var buildingObject = Instantiate(prefab, pos, Quaternion.Euler(0f, saveData.rotationY, 0f), transform);
        var building = buildingObject.GetComponent<SmolbeanBuilding>();
        building.transform.position = pos; // Need to do this to allow access to position on same frame
        building.PrefabIndex = saveData.prefabIndex;
        building.BuildingSpec = buildings[saveData.prefabIndex];
        building.name = $"{buildings[saveData.prefabIndex].buildingName} ({worldPos.y}N {worldPos.x}E)";

        if (saveData.inventory != null)
            building.Inventory.LoadFrom(saveData.inventory);

        return building;
    }
}
