using System.Linq;
using System.Collections.Generic;
using UnityEngine;
using System;
using System.Collections;
using UnityEngine.AI;

public class BuildingController : MonoBehaviour, IObjectGenerator
{
    public BuildingSpec[] buildings;
    public int Priority { get { return 100; } }
    public bool RunModeOnly { get { return true; } }
    public static BuildingController Instance;
    private GridManager gridManager;
    public string groundLayer = "Ground";

    public ParticleSystem buildingDeletedParticleSystem;

    private SoundPlayer soundPlayer;

    public IEnumerable<SmolbeanBuilding> Buildings
    {
        get
        {
            return GetComponentsInChildren<SmolbeanBuilding>();
        }
    }

    public IEnumerable<T> GetBuildingsOfType<T>() where T : SmolbeanBuilding
    {
        return GetComponentsInChildren<T>();
    }

    public IEnumerable<SmolbeanHome> GetAllHomes()
    {
        return GetComponentsInChildren<SmolbeanHome>();
    }

    void Awake()
    {
        if (Instance != null && Instance != this)
            Destroy(this);
        else
            Instance = this;
    }

    void Start()
    {
        gridManager = FindFirstObjectByType<GridManager>();
        soundPlayer = GameObject.Find("SFXManager").GetComponent<SoundPlayer>();
    }

    public IEnumerator Generate(List<int> gameMap, int gameMapWidth, int gameMapHeight)
    {
        // Nothing to do here - buildings generated by the player!
        yield return null;
    }

    public void Clear()
    {
        while (transform.childCount > 0)
            DestroyImmediate(transform.GetChild(0).gameObject);
    }

    public void SaveTo(SaveFileData saveData, string filename)
    {
        saveData.buildingData = GetComponentsInChildren<SmolbeanBuilding>()
            .Select(b => b.GetSaveData())
            .ToList();
    }

    public IEnumerator Load(SaveFileData data, string filename)
    {
        if (data.buildingData != null)
        {
            foreach (var buildingData in data.buildingData)
                InstantiateBuilding(buildingData);
        }

        return null;
    }

    public SmolbeanBuilding PlaceBuilding(Vector3 pos, float rotationY, BuildingSpec spec)
    {
        return PlaceBuilding(pos, rotationY, Array.IndexOf(buildings, spec));
    }

    public SmolbeanBuilding PlaceBuilding(Vector3 pos, float rotationY, int selectedBuildingIndex)
    {
        BuildingObjectSaveData saveData = new()
        {
            positionX = pos.x,
            positionY = pos.y,
            positionZ = pos.z,
            rotationY = rotationY,
            prefabIndex = selectedBuildingIndex,
            complete = buildings[selectedBuildingIndex].instantBuild
        };

        return InstantiateBuilding(saveData);
    }

    public SmolbeanBuilding PlaceBuildingOnSquare(BuildingSpec spec, int x, int y, IEnumerable<InventoryItemSaveData> startingInventory = null)
    {
        var bounds = gridManager.GetSquareBounds(x, y);

        float worldX = bounds.center.x;
        float worldZ = bounds.center.y;
        float worldY = gridManager.GetGridHeightAt(worldX, worldZ);

        BuildingObjectSaveData saveData = new()
        {
            positionX = worldX,
            positionY = worldY,
            positionZ = worldZ,
            rotationY = 0,
            prefabIndex = Array.IndexOf(buildings, spec),
            complete = true,
            inventory = startingInventory
        };

        return InstantiateBuilding(saveData);
    }

    public SmolbeanBuilding CompleteBuild(BuildingSite site)
    {
        BuildingObjectSaveData saveData = new()
        {
            positionX = site.transform.position.x,
            positionY = site.transform.position.y,
            positionZ = site.transform.position.z,
            rotationY = site.transform.rotation.eulerAngles.y,
            prefabIndex = site.PrefabIndex,
            complete = true
        };

        DestroyImmediate(site.gameObject);
        return InstantiateBuilding(saveData);
    }

    public SmolbeanBuilding InstantiateBuilding(BuildingObjectSaveData saveData)
    {
        var pos = new Vector3(saveData.positionX, saveData.positionY, saveData.positionZ);
        Vector2Int worldPos = gridManager.GetGameSquareFromWorldCoords(pos);

        var spec = buildings[saveData.prefabIndex];
        var prefab = saveData.complete ? spec.prefab : spec.sitePrefab;

        var buildingObject = Instantiate(prefab, pos, Quaternion.Euler(0f, saveData.rotationY, 0f), transform);
        var building = buildingObject.GetComponent<SmolbeanBuilding>();
        building.transform.position = pos; // Need to do this to allow access to position on same frame
        building.PrefabIndex = saveData.prefabIndex;
        building.BuildingSpec = buildings[saveData.prefabIndex];
        building.name = $"{buildings[saveData.prefabIndex].buildingName} ({worldPos.y}N {worldPos.x}E)";

        building.LoadFrom(saveData);

        ClampToGround(building.spawnPoint);
        ClampToGround(building.dropPoint);

        if (saveData.inventory != null)
            building.Inventory.LoadFrom(saveData.inventory);

        return building;
    }

    private void ClampToGround(GameObject obj)
    {
        if(NavMesh.SamplePosition(obj.transform.position, out var hit, 8f, NavMesh.AllAreas))
            obj.transform.position = hit.position;
    }

    public SmolbeanBuilding FindBuildingByName(string buildingName)
    {
        return GetComponentsInChildren<SmolbeanBuilding>().FirstOrDefault(b => b.name == buildingName);
    }

    public void DeleteBuilding(GameObject target)
    {
        Instantiate(buildingDeletedParticleSystem, target.transform.position, target.transform.rotation);
        Destroy(target);
        soundPlayer.Play("Demolish");
    }
}
