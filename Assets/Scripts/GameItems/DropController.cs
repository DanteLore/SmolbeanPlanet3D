using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using System.Collections;

public class DropController : MonoBehaviour, IObjectGenerator
{
    public static DropController Instance { get; private set; }
    public int Priority { get { return 100; } }
    public bool RunModeOnly { get { return true; } }

    public DropSpec[] dropSpecs;
    public string dropLayer = "Drops";
    public float dropMergeRadius = 2f;
    private Dictionary<string, DropSpec> dropSpecLookup;

    void Awake()
    {
        if(Instance != null && Instance != this)
            Destroy(gameObject);
        else
            Instance = this;
    }

    void Start()
    {
        dropSpecLookup = dropSpecs.ToDictionary(x => x.dropName, x => x);
    }

    public IEnumerator Generate(List<int> gameMap, int gameMapWidth, int gameMapHeight)
    {
        // Nothing to do here - drops generated by the game!
        yield return null;
    }

    public GameObject Drop(DropSpec spec, Vector3 position, int quantity = 0)
    {
        var others = Physics.OverlapSphere(position, dropMergeRadius, LayerMask.GetMask(dropLayer))
            .Select(d => d.GetComponent<SmolbeanDrop>())
            .Where(d => d != null && d.dropSpec == spec)
            .OrderBy(d => d.quantity);

        int qtty = (quantity == 0) ? spec.dropRate : quantity;
        
        foreach(var other in others)
        {
            if(qtty + other.quantity > spec.stackSize)
                break;
                
            qtty += other.quantity;
            DestroyImmediate(other.gameObject);
        }

        var gameObject = Instantiate(spec.GetPrefabFor(qtty), position, Quaternion.identity, transform);
        var itemStack = gameObject.GetComponent<SmolbeanDrop>();
        itemStack.dropSpec = spec;
        itemStack.quantity = qtty;

        return gameObject;
    }

    public InventoryItem CreateInventoryItem(DropSpec spec, int quantity)
    {
        return new InventoryItem {dropSpec = spec, quantity = quantity};
    }

    public InventoryItem Pickup(SmolbeanDrop stack)
    {
        // Add any logic here to handle an inability to pick up a whole stack, stack splitting etc etc

        var item = new InventoryItem {dropSpec = stack.dropSpec, quantity = stack.quantity};

        DestroyImmediate(stack.gameObject);

        return item;
    }

    public List<DropItemSaveData> GetSaveData()
    {
        return GetComponentsInChildren<SmolbeanDrop>().Select(d => d.GetSaveData()).ToList();
    }

    public IEnumerator Load(SaveFileData data)
    {
        if (data.dropItemData != null)
        {
            LoadDrops(data.dropItemData);
        }

        return null;
    }

    public void LoadDrops(List<DropItemSaveData> dropItemData)
    {
        foreach(var dropItem in dropItemData)
        {
            DropSpec dropSpec = dropSpecLookup[dropItem.dropSpecName];

            if(dropSpec == null)
            {
                Debug.LogError("Drop spec not found in list.  Assign it to the DropController in the editor.");
            }
            else
            {
                var pos = new Vector3(dropItem.positionX, dropItem.positionY, dropItem.positionZ);
                var drop = Drop(dropSpec, pos, dropItem.quantity).GetComponent<SmolbeanDrop>();
                drop.LoadExtraData(dropItem);
            }
        }
    }

    public void Clear()
    {
        while (transform.childCount > 0)
            DestroyImmediate(transform.GetChild(0).gameObject);
    }

    public DropSpec DropSpecByName(string name)
    {
        return dropSpecLookup[name];
    }
}
